<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Mizudori International</title>
    <description>Mushroom</description>
    <link/>
    <pubDate>Apr 01, 2014</pubDate>
    <item>
      <title>Api_Object</title>
      <link>/mizudori-international/server-scripts/api_object.php</link>
      <description>&lt;?php
/**
 * Api
 *
 * Base abstract class for all API library implementations.
 *
 * This provides a rudimentary api for sending a POST data to Google
 * docs forms and for emailing data to
 */
abstract class Api_Object {

	/**
	 * Form validation error messages
	 * @var array
	 */
	protected $messages = array();

	/**
	 * API validation error message
	 * @var mixed
	 */
	protected $error_messages = '';

	/**
	 * Domain name of the URL accessing the API
	 * @var string
	 */
	protected $domain;

	/**
	 * HTTP POST and/or GET data submitted via the API
	 * @var array
	 */
	protected $request = array();

	/**
	 * Format in which the data is to be returned to the client - defaults to JSON
	 * if none has been specified
	 * @var string
	 */
	protected $response_type;

	/**
	 * Response data to be returned to the client
	 * @var string
	 */
	protected $response_data;

	/**
	 * Api_Service object
	 * @var Api_Service
	 */
	protected $api_service;

	public function __construct($api_service)
	{
		$this-&gt;api_service = $api_service;

		if ( ! is_null($api_service-&gt;get_response_type()))
		{
			$this-&gt;request = $api_service-&gt;get_request();
			$this-&gt;response_type = $api_service-&gt;get_response_type();
		}
		else
		{
			$this-&gt;set_request($api_service-&gt;get_request());
		}
	}

	/**
	 * Sets the request and determines the format in which the request data is
	 * to be returned to the client
	 */
	public function set_request($request)
	{
		$this-&gt;request = $request;

		// Determine the response type
		if ( ! $this-&gt;api_service-&gt;verify_array_index($request, 'resp'))
		{
			$this-&gt;set_response_type('json');
		}
		else
		{
			$this-&gt;set_response_type($request['resp']);
		}
	}

	/**
	 * Gets the response type
	 *
	 * @return string
	 */
	public function get_response_type()
	{
		return $this-&gt;response_type;
	}

	/**
	 * Sets the response type
	 *
	 * @param $type Type of response for the output data
	 */
	public function set_response_type($type)
	{
		// Set the response type for the API library object
		$this-&gt;response_type = $type;

		// Set the response type for the API service
		$this-&gt;api_service-&gt;set_response_type($type);
	}

	/**
	 * Gets the response data
	 * If the error message has already been set, the error is returned instead
	 *
	 * @return mixed The data fetched by the API request
	 */
	public function get_response_data()
	{
		return (isset($this-&gt;error_message))
				? $this-&gt;error_message
				: $this-&gt;response_data;
	}

	/**
	 * Sets the error message
	 *
	 * @param string $error_message Error message for the Api request
	 */
	public function set_error_message($error_message)
	{
		if (is_array($error_message))
		{
			$this-&gt;error_message = $this-&gt;array_as_json($error_message);
		}
		else
		{
			$this-&gt;error_message = $error_message;
		}
	}

	/**
	 * Abstract method that must be implemented by all subclasses
	 * It is this method that services the API request
	 */
	abstract public function perform_task();

	/**
	 * Response
	 *
	 * @param int ret_value
	 * @param string response_type = XML or JSON
	 * @param string error_message - The error message to display
	 *
	 * @return string
	 */
	protected function response($ret_value, $error_messages='')
	{
		$response = array();

		// Set the record count to zero where the value of @param ret_val &lt;&gt; 0
		$this-&gt;record_count = ($ret_value != 0) ? 0 : 1;

		if ($ret_value == 0)
		{
			$response = array(
				"payload" =&gt; array(
					"domain" =&gt; $this-&gt;domain,
					"success" =&gt; "true"
				),
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(0)
			);
		}
		elseif ($ret_value == 1)
		{
			$response = array(
				"payload" =&gt; array(
					"domain" =&gt; $this-&gt;domain,
					"success" =&gt; "false"
				),
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(003, '', $error_messages)
			);
		}
		elseif ($ret_value == 2)
		{
			// Authentication Failed. Invalid User or App Key
			$response = array(
				"payload" =&gt; array("domain" =&gt; $this-&gt;domain, "success" =&gt;
					"false"),
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(005)
			);
		}
		elseif ($ret_value == 4)
		{
			// No results got from the database query
			$response = array(
				"payload" =&gt; array(
					"domain" =&gt; $this-&gt;domain,
					"success" =&gt; "true"
				),
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(007)
			);
		}
		else
		{
			$response = array(
				"payload" =&gt; array(
					"domain" =&gt; $this-&gt;domain,
					"success" =&gt; "false"
				),
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(004)
			);
		}

		return $this-&gt;array_as_json($response);
	}

	/**
	 * Creates a JSON response given an array.
	 *
	 * @param array $data Array to be converted to JSON
	 * @return string JSON representation of the data in @param $array
	 */
	protected function array_as_json($data)
	{
		return $this-&gt;array2json($data);
	}

	/**
	 * PHP 5.1.x doesn't seem to support json_encode.
	 * Copied this manual implementation from
	 * http://de.php.net/json_encode#100835
	 * @param  [type] $arr [description]
	 * @return [type]      [description]
	 */
	public function array2json($data) {
		if(function_exists('json_encode')) return json_encode($data); //Lastest versions of PHP already has this functionality.
		if( is_array($data) || is_object($data) ) {
		$islist = is_array($data) &amp;&amp; ( empty($data) || array_keys($data) === range(0,count($data)-1) );

		if( $islist ) {
			$json = '[' . implode(',', array_map('array2json', $data) ) . ']';
		} else {
			$items = Array();
			foreach( $data as $key =&gt; $value ) {
				$items[] = $this-&gt;array2json("$key") . ':' . $this-&gt;array2json($value);
			}
			$json = '{' . implode(',', $items) . '}';
		}
	} elseif( is_string($data) ) {
		# Escape non-printable or Non-ASCII characters.
		# I also put the \\ character first, as suggested in comments on the 'addclashes' page.
		$string = '"' . addcslashes($data, "\\\"\n\r\t/" . chr(8) . chr(12)) . '"';
		$json    = '';
		$len    = strlen($string);
		# Convert UTF-8 to Hexadecimal Codepoints.
		for( $i = 0; $i &lt; $len; $i++ ) {

			$char = $string[$i];
			$c1 = ord($char);

			# Single byte;
			if( $c1 &lt;128 ) {
				$json .= ($c1 &gt; 31) ? $char : sprintf("\\u%04x", $c1);
				continue;
			}

			# Double byte
			$c2 = ord($string[++$i]);
			if ( ($c1 &amp; 32) === 0 ) {
				$json .= sprintf("\\u%04x", ($c1 - 192) * 64 + $c2 - 128);
				continue;
			}

			# Triple
			$c3 = ord($string[++$i]);
			if( ($c1 &amp; 16) === 0 ) {
				$json .= sprintf("\\u%04x", (($c1 - 224) &lt;&lt;12) + (($c2 - 128) &lt;&lt; 6) + ($c3 - 128));
				continue;
			}

			# Quadruple
			$c4 = ord($string[++$i]);
			if( ($c1 &amp; 8 ) === 0 ) {
				$u = (($c1 &amp; 15) &lt;&lt; 2) + (($c2&gt;&gt;4) &amp; 3) - 1;

				$w1 = (54&lt;&lt;10) + ($u&lt;&lt;6) + (($c2 &amp; 15) &lt;&lt; 2) + (($c3&gt;&gt;4) &amp; 3);
				$w2 = (55&lt;&lt;10) + (($c3 &amp; 15)&lt;&lt;6) + ($c4-128);
				$json .= sprintf("\\u%04x\\u%04x", $w1, $w2);
			}
		}
	} else {
		# int, floats, bools, null
		$json = strtolower(var_export( $data, true ));
	}
	return $json;
	}
}</description>
    </item>
    <item>
      <title>Api_Service</title>
      <link>/mizudori-international/server-scripts/api_service.php</link>
      <description>&lt;?php
/**
 * Api_Service
 *
 * This class runs the API service. It abstracts the details of handling of the API
 * requests from the API controller. All task switching and routing is handled by
 * this class.
 *
 * The API routing works through inversion of control (IoC). The name of the library
 * that services the api request is inferred from the name of the task. Not all API
 * requests have their own libraries. As such, this service makes use of a
 * "task routing table". This table is a key=&gt;value array with the key being the
 * name of the api task and the value the name of the implementing library
 * or associative array of the class name and callback method to service the request
 */

// Suffix for all API library names
define('API_LIBRARY_SUFFIX', '_Api_Object');
define('ROOT_DIR', realpath(dirname(__FILE__)).DIRECTORY_SEPARATOR);

final class Api_Service {

	/**
	 * The API request parameters
	 * @var array
	 */
	private $request = array();

	/**
	 * Response to be returned to the calling controller
	 * @var string
	 */
	private $response;

	/**
	 * Format in which the response is returned to the client - defaults to JSON
	 * @var string
	 */
	private $response_type;

	/**
	 * API library object to handle the requested task
	 * @var Api_Object
	 */
	private $api_object;

	/**
	 * Name of the API task to be routed
	 * @var string
	 */
	private $task_name;

	/**
	 * IP Address of the client making the API request
	 * @var string
	 */
	private $request_ip_address;

	/**
	 * API request parameters
	 * @var array
	 */
	private $api_parameters;

	public function __construct()
	{
		// Set the request data
		$this-&gt;request = ($_SERVER['REQUEST_METHOD'] == 'POST')
			? $_POST
			: $_GET;

		// Check if the IP is from a shared internet connection
		if ( ! empty($_SERVER['HTTP_CLIENT_IP']))
		{
			$this-&gt;request_ip_address = $_SERVER['HTTP_CLIENT_IP'];
		}
		// Check if the IP address is passed from a proxy server such as Nginx
		elseif ( ! empty($_SERVER['HTTP_X_FORWARDED_FOR']))
		{
			$this-&gt;request_ip_address  = $_SERVER['HTTP_X_FORWARDED_FOR'];
		}
		else
		{
			$this-&gt;request_ip_address = $_SERVER['REMOTE_ADDR'];
		}
	}

	/**
	 * Runs the API service
	 */
	public function run_service()
	{
		// Route the API task
		$this-&gt;_route_api_task();
	}

	/**
	 * Gets the API request parameters as an array
	 *
	 * @return array
	 */
	public function get_request()
	{
		return $this-&gt;request;
	}

	/**
	 * Sets the response type
	 *
	 * @param $response_type New value for $this-&gt;response_type
	 */
	public function set_response_type($response_type)
	{
		$this-&gt;response_type = $response_type;
	}

	/**
	 * Returns the response type
	 *
	 * @return string
	 */
	public function get_response_type()
	{
		return $this-&gt;response_type;
	}

	/**
	 * Sets the response data
	 *
	 * @param mixed $response_data
	 */
	public function set_response($response_data)
	{
		$this-&gt;response = (is_array($response_data))
			? $this-&gt;array2json($response_data)
			: $response_data;
	}

	/**
	 * Gets the response data
	 *
	 * @return string The response to the API request
	 */
	public function get_response()
	{
		return $this-&gt;response;
	}

	/**
	 * Gets the name of the task being handled by the API service
	 *
	 * @return string
	 */
	public function get_task_name()
	{
		return $this-&gt;task_name;
	}

	/**
	 * Initializes the API library to be used to service the API task
	 *
	 * The name of API library file containing the class implementation is
	 * constructed/inferred from the @param $class_name
	 *
	 * @param string $base_name Name of the implementing class
	 */
	private function _init_api_library($base_name)
	{
		// Generate the name of the class
		$class_name = $base_name.API_LIBRARY_SUFFIX;

		// Check if the implementing library exists
		if ( ! file($class_name.'.php'))
		{
			throw new Exception('File not found',$class_name.'.php');
		}

		// Include the implementing API library file
		require_once $class_name.'.php';

		// Temporary instance for type checking
		$temp_api_object = new $class_name($this);

		// Check if the implementing library is an instance of Api_Object
		// NOTE: All API libraries *MUST* be subclasses of Api_Object
		if ( ! $temp_api_object instanceof Api_Object)
			throw new Exception('Invalid Api library', $class_name, 'Api_Object');

		// Discard the old copy
		unset($this-&gt;temp_api_object);

		// Instaniate a fresh copy of the API library
		$this-&gt;api_object = new $class_name($this);

		//print_r(get_class_methods($this-&gt;api_object));exit;

	}

	/**
	 * Makes sure the appropriate key is there in a given
	 * array (POST or GET) and that it is set
	 *
	 * @param arrray $arr - The given array.
	 * @param string $index  The array key index to lookup
	 * @return bool
	 */
	public function verify_array_index(array &amp; $arr, $index)
	{
		return (isset($arr[$index]) AND array_key_exists($index, $arr));
	}

	/**
	 * Routes the API task requests to their respective API libraries
	 *
	 * The name of the library is inferred from the name of the task. If the
	 * library is not found, a lookup is done in the task routing table. If the
	 * lookup fails, the API task request returns a "not found"(404) error
	 */
	private function _route_api_task()
	{

		// Make sure we have a task to work with
		if ( ! $this-&gt;verify_array_index($this-&gt;request, 'task'))
		{
			$this-&gt;set_response($this-&gt;get_error_msg(001, 'task'));

			return;
		}
		else
		{
			$this-&gt;task_name = ucfirst($this-&gt;request['task']);
		}

		// Load the base API library
		require_once('Api_Object.php');

		// Get the task handler (from the api config file) for the requested task
		$task_handler = $this-&gt;_get_task_handler(strtolower($this-&gt;task_name));

		$task_library_found = FALSE;

		// Check if handler has been set
		if (isset($task_handler))
		{
			// Check if the handler is an array
			if (is_array($task_handler))
			{

				// Load the library for the specified class
				$this-&gt;_init_api_library($task_handler[0]);

				// Execute the callback function
				call_user_func(array($this-&gt;api_object, $task_handler[1]));
			}
			else
			{

				// Load the library specified in $task_handler
				$this-&gt;_init_api_library($task_handler);

				// Perform the requested task
				$this-&gt;api_object-&gt;perform_task();
			}

			// Set the response data
			$this-&gt;response = $this-&gt;api_object-&gt;get_response_data();

			$task_library_found = TRUE;
		}
		else // Task handler not found in routing table therefore look the implementing library
		{
			// All library file names *must* be suffixed with the value specified in API_LIBRARY_SUFFIX
			$library_file_name = $this-&gt;task_name.API_LIBRARY_SUFFIX;

			if ( file($library_file_name)) // Library file exists
			{
				// Initialize the API library
				$this-&gt;_init_api_library($this-&gt;task_name);

				// Perform the requested task
				$this-&gt;api_object-&gt;perform_task();

				// Set the response data
				$this-&gt;response = $this-&gt;api_object-&gt;get_response_data();

				$task_library_found = TRUE;
			}
			else
			{   // Library not found
				$this-&gt;response = $this-&gt;array2json(array(
					"error" =&gt; $this-&gt;get_error_msg(999)
				));

				return;
			}
		}

		// Discard the API object from memory
		if (isset($this-&gt;api_object))
		{
			unset($this-&gt;api_object);
		}
	}

	/**
	 * Looks up the api config file for the library that handles the task
	 * specified in @param $task. The api config file is the API task routing
	 * table
	 *
	 * @param string $task - Task to be looked up in the routing table
	 * @return mixed
	 */
	private function _get_task_handler($task)
	{

		$t = $this-&gt;_api_router();

		$task_handler = $t[$task];

		return (isset($task_handler))
			? $task_handler
			: NULL;
	}


	/**
	 * Displays Error codes with their corresponding messages.
	 * returns an array error - array("code" =&gt; "CODE",
	 * "message" =&gt; "MESSAGE") based on the given code
	 *
	 * @param string $errcode  - The error code to be displayed.
	 * @param string $param - The missing parameter.
	 * @param string $message - The error message to be displayed.
	 * @return array
	 */
	public function get_error_msg($errcode, $param = '', $message='')
	{
		switch ($errcode)
		{
			case 0:
				return array(
					"code" =&gt; "0",
					"message" =&gt; "No error"
				);

			case 001:
				return array(
					"code" =&gt; "001",
					"message" =&gt; "Missing parameter - $param."
				);

			case 002:
				return array(
					"code" =&gt; "002",
					"message" =&gt; "Invalid parameter"
				);

			case 003:
				return array("code" =&gt; "003", "message" =&gt; $message);

			case 004:
				return array(
					"code" =&gt; "004",
					"message" =&gt;"Data was not sent by post method"
				);

			case 005:
				return array(
					"code" =&gt; "005",
					"message" =&gt; "No data"
				);

			default:
				return array(
					"code" =&gt; "999",
					"message" =&gt; "Resources not found"
				);
		}
	}

	private function _api_router()
	{
		$config = array(
			// Version
			"order" =&gt; "Order_Forms",
			"contact" =&gt; "Contact_Forms"
		);

		return $config;
	}

	/**
	 * PHP 5.1.x doesn't seem to support json_encode.
	 * Copied this manual implementation from
	 * http://de.php.net/json_encode#100835
	 * @param  [type] $arr [description]
	 * @return [type]      [description]
	 */
	public function array2json($data) {
		if(function_exists('json_encode')) return json_encode($data); //Lastest versions of PHP already has this functionality.
		if( is_array($data) || is_object($data) ) {
		$islist = is_array($data) &amp;&amp; ( empty($data) || array_keys($data) === range(0,count($data)-1) );

		if( $islist ) {
			$json = '[' . implode(',', array_map('array2json', $data) ) . ']';
		} else {
			$items = Array();
			foreach( $data as $key =&gt; $value ) {
				$items[] = $this-&gt;array2json("$key") . ':' . $this-&gt;array2json($value);
			}
			$json = '{' . implode(',', $items) . '}';
		}
	} elseif( is_string($data) ) {
		# Escape non-printable or Non-ASCII characters.
		# I also put the \\ character first, as suggested in comments on the 'addclashes' page.
		$string = '"' . addcslashes($data, "\\\"\n\r\t/" . chr(8) . chr(12)) . '"';
		$json    = '';
		$len    = strlen($string);
		# Convert UTF-8 to Hexadecimal Codepoints.
		for( $i = 0; $i &lt; $len; $i++ ) {

			$char = $string[$i];
			$c1 = ord($char);

			# Single byte;
			if( $c1 &lt;128 ) {
				$json .= ($c1 &gt; 31) ? $char : sprintf("\\u%04x", $c1);
				continue;
			}

			# Double byte
			$c2 = ord($string[++$i]);
			if ( ($c1 &amp; 32) === 0 ) {
				$json .= sprintf("\\u%04x", ($c1 - 192) * 64 + $c2 - 128);
				continue;
			}

			# Triple
			$c3 = ord($string[++$i]);
			if( ($c1 &amp; 16) === 0 ) {
				$json .= sprintf("\\u%04x", (($c1 - 224) &lt;&lt;12) + (($c2 - 128) &lt;&lt; 6) + ($c3 - 128));
				continue;
			}

			# Quadruple
			$c4 = ord($string[++$i]);
			if( ($c1 &amp; 8 ) === 0 ) {
				$u = (($c1 &amp; 15) &lt;&lt; 2) + (($c2&gt;&gt;4) &amp; 3) - 1;

				$w1 = (54&lt;&lt;10) + ($u&lt;&lt;6) + (($c2 &amp; 15) &lt;&lt; 2) + (($c3&gt;&gt;4) &amp; 3);
				$w2 = (55&lt;&lt;10) + (($c3 &amp; 15)&lt;&lt;6) + ($c4-128);
				$json .= sprintf("\\u%04x\\u%04x", $w1, $w2);
			}
		}
	} else {
		# int, floats, bools, null
		$json = strtolower(var_export( $data, true ));
	}
	return $json;
	}

}
</description>
    </item>
    <item>
      <title>Contact_Forms_Api_Object</title>
      <link>/mizudori-international/server-scripts/contact_forms_api_object.php</link>
      <description>&lt;?php
/**
 * This class handlies actives submitting data to google docs
 */
define('REPLY_EMAIL', "addhen@gmail.com");

class Contact_Forms_Api_Object extends Api_Object {

	public function __construct($api_service)
	{
		parent::__construct($api_service);
	}

	/**
	 * Handler for the API task request
	 */
	public function perform_task()
	{
		if ( ! $this-&gt;api_service-&gt;verify_array_index($this-&gt;request, 'name'))
		{
			$this-&gt;set_error_message(array(
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(001, 'name')
			));
			return;
		}
		else
		{

			// Tag the media and set the response data
			$this-&gt;response_data = $this-&gt;_post_to_google();
		}
	}



	/**
	 * Post data to google form
	 */
	private function _post_to_google()
	{
		if ($_POST)
		{

			$key_value = array();

			$message = '';
			// For each POST variable as $name_of_input_field =&gt; $value_of_input_field
			foreach ($_POST as $key =&gt; $value)
			{
				// Set array element for each POST variable
				// $key_value[] = stripslashes($key)."=".stripslashes($value);
				$message .= stripslashes($key).": ".stripslashes($value)."\r\n";
			}

			// Email details
			$this-&gt;_email($_POST['email'],'Mizudori Internation - Contact Form', $message, $_POST['name']);
			$this-&gt;_reply($_POST['email'],'Thank you for contacting us.', $message, $_POST['name']);
			// SUCESS!!!
			$ret = array(
				"payload" =&gt; array(
					"domain" =&gt; $this-&gt;domain,
					"success" =&gt; "true"
				),
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(0)
			);
			return $this-&gt;set_error_message($ret);
		}
		else
		{
			return $this-&gt;set_error_message(array("error" =&gt;
				$this-&gt;api_service-&gt;get_error_msg(004)));
		}
	}

	private function _reply($to, $subject, $message, $full_name)
	{

		$headers = 'From: Mizudori International &lt;do-not-reply@mizudori.jp&gt;'."\r\n".
		'MIME-Version: 1.0'."\r\n".
		'Reply-To: do-not-reply@mizudori.jp'."\r\n".
		'Content-type: text/plain; charset=utf-8'."\r\n".
		'X-Mailer: PHP/'.phpversion();
		$msg = "Dear $full_name,\r\n\r\n";
		$msg .="We will get back to you shortly. \r\n\r\n";
		$msg .= "Thank you,\r\n";
		$msg .= "Mizudori International Team";
		mail($to, $subject, $msg, $headers);
	}

	private function _email($to, $subject, $message, $full_name)
	{

		$headers = "From: $full_name &lt;$to&gt;"."\r\n".
		'MIME-Version: 1.0'."\r\n".
		'Reply-To: '.REPLY_EMAIL."\r\n".
		'Content-type: text/plain; charset=utf-8'."\r\n".
		'X-Mailer: PHP/'.phpversion();

		mail(REPLY_EMAIL, $subject, $message, $headers);
	}
}</description>
    </item>
    <item>
      <title>Index</title>
      <link>/mizudori-international/server-scripts/.php</link>
      <description>&lt;?php
/**
 * This controller handles API requests.
 *
 * @version 29 - Henry Addo 2010-11-09
 *
 * PHP version 5
 * LICENSE: This source file is subject to LGPL license
 * that is available through the world-wide-web at the following URI:
 * http://www.gnu.org/copyleft/lesser.html
 *
 * Api_Controller
 * @author     Ushahidi Team &lt;team@ushahidi.com&gt;
 * @package    Ushahidi - http://source.ushahididev.com
 * @subpackage Controllers
 * @copyright  Ushahidi - http://www.ushahidi.com
 * @license    http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License (LGPL)
 */
require_once('Api_Service.php');
class Api {

	public function __construct()
	{
		// Instantiate the API service
		$api_service = new Api_Service();

		// Run the service
		$api_service-&gt;run_service();

		// Avoid caching
		header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
		header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); // Date in the past

		$resp = '';

		//echo $api_service-&gt;get_response_type();
		if ($api_service-&gt;get_response_type() == 'jsonp')
		{
			header("Content-type: application/json; charset=utf-8");
			$resp = $_GET['callback'].'('.$api_service-&gt;get_response().')';
		}
		else
		{
			header("Content-type: application/json; charset=utf-8");
			$resp =  $api_service-&gt;get_response();
		}

		print $resp;

	}
}

new Api;</description>
    </item>
    <item>
      <title>Order_Forms_Api_Object</title>
      <link>/mizudori-international/server-scripts/order_forms_api_object.php</link>
      <description>&lt;?php
/**
 * This class handlies actives submitting data to google docs
 */
define('REPLY_EMAIL', "addhen@gmail.com");

class Google_Forms_Api_Object extends Api_Object {

	public function __construct($api_service)
	{
		parent::__construct($api_service);
	}

	/**
	 * Handler for the API task request
	 */
	public function perform_task()
	{
		if ( ! $this-&gt;api_service-&gt;verify_array_index($this-&gt;request, 'task'))
		{
			$this-&gt;set_error_message(array(
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(001, 'task')
			));
			return;
		}
		else
		{

			// Tag the media and set the response data
			$this-&gt;response_data = $this-&gt;_post_to_google();
		}
	}



	/**
	 * Post data to google form
	 */
	private function _post_to_google()
	{
		if ($_POST)
		{

			$key_value = array();

			$message = '';
			// For each POST variable as $name_of_input_field =&gt; $value_of_input_field
			foreach ($_POST as $key =&gt; $value)
			{
				// Set array element for each POST variable
				// $key_value[] = stripslashes($key)."=".stripslashes($value);
				$message .= stripslashes($key).": ".stripslashes($value)."\r\n";
			}

			// Create a query string with join function separted by &amp;
			/*$query_string = join("&amp;", $key_value);

			// Check to see if cURL is installed ...
			if ( ! function_exists('curl_init'))
			{
				die('Sorry cURL is not installed!');
			}

			// The google docs form URL
			$url = $_POST['url'];

			$ch = curl_init();

			// Set the url, number of POST vars, POST data
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_POST, count($key_value));
			curl_setopt($ch, CURLOPT_POSTFIELDS, $query_string);

			// Set some settings that make it all work :)
			curl_setopt($ch, CURLOPT_HEADER, FALSE);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
			curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE);

			// Execute SalesForce web to lead PHP cURL
			$result = curl_exec($ch);

			// close cURL connection
			curl_close($ch);*/

			// Email details
			$this-&gt;_email($_POST['email'],'Mizudori Internation - Order Placed', $message, $_POST['name']);
			$this-&gt;_reply($_POST['email'],'Thank you for your order.', $message, $_POST['name']);
			// SUCESS!!!
			$ret = array(
				"payload" =&gt; array(
					"domain" =&gt; $this-&gt;domain,
					"success" =&gt; "true"
				),
				"error" =&gt; $this-&gt;api_service-&gt;get_error_msg(0)
			);
			return $this-&gt;set_error_message($ret);
		}
		else
		{
			return $this-&gt;set_error_message(array("error" =&gt;
				$this-&gt;api_service-&gt;get_error_msg(004)));
		}
	}

	private function _reply($to, $subject, $message, $full_name)
	{

		$headers = 'From: Mizudori International &lt;do-not-reply@mizudori.jp&gt;'."\r\n".
		'MIME-Version: 1.0'."\r\n".
		'Reply-To: do-not-reply@mizudori.jp'."\r\n".
		'Content-type: text/plain; charset=utf-8'."\r\n".
		'X-Mailer: PHP/'.phpversion();
		$msg = "Dear $full_name,\r\n\r\n";
		$msg .="We acknowledge receipt of your order. \r\n\r\n";
		$msg .="See below for the details of your order.\r\n\r\n";
		$msg .= $message;
		$msg .= "Thank you for your order,\r\n";
		$msg .= "Mizudori International Team";
		mail($to, $subject, $msg, $headers);
	}

	private function _email($to, $subject, $message, $full_name)
	{

		$headers = "From: $full_name &lt;$to&gt;"."\r\n".
		'MIME-Version: 1.0'."\r\n".
		'Reply-To: '.REPLY_EMAIL."\r\n".
		'Content-type: text/plain; charset=utf-8'."\r\n".
		'X-Mailer: PHP/'.phpversion();

		mail(REPLY_EMAIL, $subject, $message, $headers);
	}
}</description>
    </item>
  </channel>
</rss>
